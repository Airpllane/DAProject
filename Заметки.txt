Слайд 2:

В настоящее время обучение английскому языку невозможно представить без тестирования для проверки усвоения материала. Составление заданий для теста обычно требует затрат времени со стороны преподавателя. В связи с этим является актуальной задачей создание генераторов тестовых заданий. Тестовые задания часто включают в себя упражнения на использование глаголов в определенном времени.  Чтобы обучить генератор необходим набор данных, включающий в себя предложения в одном времени. Для получения такого набора данных нам требуется создать классификатор для определения времени произвольного предложения.  

Слайд 3:

Был использован набор данных из проекта Tatoeba. Проект Tatoeba — это коллекция предложений и переводов. Сайт предлагает для загрузки наборы данных, содержащие предложения и времена для 389 языков, включая английский.

Слайд 4:

Нами было использовано два набора данных из проекта Tatoeba. Один из них включает id предложения и само предложения, а второй id предложения и tag. Они были соединены в один по id, чтобы создать далее использованный набор данных.

Слайд 5:

Обработка данных представляет собой замену всех слов в предложении на тэги частей речи с помощью функции из библиотеки nltk. Каждое предложения разбивается на отдельные слова, которые затем заменяются на тэги частей речи.

Слайд 6:

Затем с помощью токенайзера список из частей речи был заменен на матрицу в которой зафиксировано наличие 50 наиболее часто используемых частей речи.

Слайд 7:

В качестве основы была использована реализация алгоритма градиентного бустинга XGBoost из библиотеки xgboost. Модель была обучена с использованием набора данных полученного на предыдущих этапах. Названия времен были конвертированы в номера и были использованы в качестве меток классов.  В качестве важного параметра является n_estimators – количество моделей, которые будут участвовать в бустинге. Поэтому для поиска оптимального значения был использован GridSearchCV из библиотеки sklearn. 

Слайд 8:

На слайде приведены характеристики работы решения.

Слайд 9:

На слайде приведена матрица ошибок. Из матрицы видно, что результаты для всех кроме класса other отличные. Это объясняется тем, что в классе other недостаточно данных для обучения.

Слайд 10:

На основе обученного классификатора был создан генератор предложений на английском языке на основе времени Present Simple.
